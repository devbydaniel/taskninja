---
import RootLayout from "../../layouts/RootLayout.astro";
import AppLayout from "../../layouts/AppLayout.astro";
import ContentAreaLayout from "../../layouts/ContentAreaLayout.astro";
import DarkModeToggle from "../../components/DarkModeToggle.astro";
import TaskList from "../../components/TaskList/TaskList.astro";
import {
  getProjectTasks,
  getProjects,
  getTags,
} from "../../lib/data/taskWarrior";
import groupTasksBySubProject from "../../lib/util/groupTasksBySubproject";

const projects = await getProjects();
const tags = await getTags();
const { project } = Astro.params;

const tasks = await getProjectTasks(project!);
const noSubProjectLabel = "No Subproject";
const groupedTasks = groupTasksBySubProject({
  tasks,
  project: project!,
  noSubProjectLabel,
});
---

<RootLayout title="TaskNinja">
  <AppLayout projects={projects} tags={tags} currentProject={project}>
    <ContentAreaLayout title={project!}>
      <DarkModeToggle slot="actions" />
      {
        Object.entries(groupedTasks)
          // sort without subproject first, then alphabetically
          .sort((a, b) => (!a[0] ? 1 : a[0] > b[0] ? 1 : -1))
          .map(([subproject, tasks]) => (
            <div class="subproject-section">
              {subproject !== noSubProjectLabel && (
                <h2 class="subproject-section__heading">
                  <a href={`/projects/${project}.${subproject}`}>
                    {subproject}
                  </a>
                </h2>
              )}
              <TaskList tasks={tasks} hideProjectName={true} />
            </div>
          ))
      }
    </ContentAreaLayout>
  </AppLayout>
</RootLayout>

<style>
  .subproject-section {
    margin: var(--gap-md) 0;
  }

  .subproject-section__heading {
    padding: 0 var(--gap-md);
    font-size: var(--font-size);
  }
</style>
