---
import Modal from "../Modal.astro";
import Select from "../Select.astro";
import Button from "../Button.astro";
import { type Task } from "../../lib/models/types";

interface Props {
  id: string;
  task: Task;
  projects: string[];
}

const { id, task, projects } = Astro.props;
const projectOptions = [
  { value: "", label: "No project" },
  ...projects.map((project) => ({ value: project, label: project })),
];
---

<Modal id={id} title={task.description}>
  <form class="move-to-project-form__form">
    <div class="move-to-project-form">
      <div class="move-to-project-form__input">
        <label for="project" class="move-to-project-form__input__label"
          >Project</label
        >
        <Select
          autofocus
          preSelected={task.project}
          name="project"
          class="move-to-project-form__input__input"
          options={projectOptions}
        />
      </div>
      <input type="hidden" name="task-id" value={task.uuid} />
      <div class="move-to-project-form__buttons">
        <Button
          variant="ghost"
          class="move-to-project-form__buttons__button"
          id="cancel"
        >
          Cancel
        </Button>
        <Button
          class="move-to-project-form__buttons__button"
          id="move"
          type="submit"
        >
          Move
        </Button>
      </div>
    </div>
  </form>
</Modal>

<style>
  .move-to-project-form {
    display: grid;
    gap: var(--gap-md);
  }

  .move-to-project-form__input {
    display: grid;
    gap: var(--gap-sm);
  }

  .move-to-project-form__buttons {
    display: flex;
    justify-content: end;
    gap: var(--gap-sm);
  }
</style>

<script define:vars={{ id }} is:inline>
  const modal = document.getElementById(id);
  const cancelButton = modal.querySelector("#cancel");

  // Close the modal when the cancel button is clicked
  cancelButton.addEventListener("click", () => {
    modal.close();
  });

  // Move task to project on submit
  const form = modal.querySelector("form");
  form.addEventListener("submit", async (event) => {
    event.preventDefault();
    const formData = new FormData(form);
    const taskId = formData.get("task-id");
    const project = formData.get("project");
    const response = await fetch(`/api/tasks/${taskId}`, {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ key: "project", newValue: project }),
    });
    if (!response.ok) {
      console.error("Failed to move task to project");
    }
    if (response.ok) {
      modal.close();
      location.reload();
    }
  });
</script>
