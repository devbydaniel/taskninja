---
import Modal from "./Modal.astro";
import Button from "./Button.astro";

interface Props {
  tags?: string[];
}

const { tags } = Astro.props;
---

<Modal id={"edit-tags-modal"}>
  <form class="edit-tags-form__form">
    <div class="edit-tags-form">
      <div class="edit-tags-form__input">
        <label for="tags" class="edit-tags-form__input__label">Tags</label>
        <ul id="tags" tabindex="-1">
          {
            tags?.map((tag) => (
              <li class="edit-tags-form__input__input">
                <input id={tag} type="checkbox" name={`tag-${tag}`} />
                <label for={tag}>{tag}</label>
              </li>
            ))
          }
        </ul>
      </div>
      <input type="hidden" name="task-id" />
      <div class="edit-tags-form__buttons">
        <Button
          variant="ghost"
          class="edit-tags-form__buttons__button"
          id="cancel"
        >
          Cancel
        </Button>
        <Button class="edit-tags-form__buttons__button" id="save" type="submit">
          Save
        </Button>
      </div>
    </div>
  </form>
</Modal>

<style>
  .edit-tags-form {
    display: grid;
    gap: var(--gap-md);
  }

  .edit-tags-form__input {
    display: grid;
    gap: var(--gap-sm);
  }

  ul#tags {
    margin: 0;
    padding: var(--gap-sm) var(--gap-sm);
    border: 1px solid var(--color-text-muted);
    border-radius: var(--border-radius);
    background-color: white;
    list-style-type: none;
    display: flex;
    flex-direction: column;
    gap: var(--gap-sm);
    max-height: 100px;
    overflow-y: auto;
  }

  .edit-tags-form__buttons {
    display: flex;
    justify-content: end;
    gap: var(--gap-sm);
  }
</style>

<script>
  import { editTagsModal } from "../lib/customEvents";
  import { type Task } from "../lib/models/types";

  const modal = document.getElementById(
    "edit-tags-modal",
  )! as HTMLDialogElement;
  const modalTitle = modal.querySelector(".modal__title") as HTMLHeadingElement;
  const cancelButton = modal.querySelector("#cancel") as HTMLButtonElement;
  const form = modal.querySelector(".edit-tags-form__form") as HTMLFormElement;
  const taskIdInput = modal.querySelector(
    "input[name=task-id]",
  ) as HTMLInputElement;

  // TODO extract this to a helper function and remove it on modal close!
  function handleEvent(event: Event) {
    const customEvent = event as CustomEvent;
    const task = customEvent.detail.task as Task;
    modalTitle.textContent = task.description;
    taskIdInput.value = task.id.toString();
    task.tags?.forEach((tag) => {
      const checkbox = modal.querySelector(
        `input[name=tag-${tag}]`,
      ) as HTMLInputElement;
      checkbox.checked = true;
    });
    modal.showModal();
  }

  async function handleSubmit(event: Event) {
    event.preventDefault();
    const formData = new FormData(form);
    const task = formData.get("task-id");
    const tags = Array.from(formData.keys())
      .filter((key) => key.startsWith("tag-"))
      .map((key) => key.replace("tag-", ""));
    const response = await fetch(`/api/tasks/${task}`, {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ key: "tags", newValue: tags }),
    });
    if (!response.ok) {
      const { message } = await response.json();
      console.error(message);
    }
    if (response.ok) {
      modal.close();
      location.reload();
    }
  }

  function handleClose() {
    form.removeEventListener("submit", handleSubmit);
    const checkboxes = modal.querySelectorAll(
      "input[type=checkbox]",
    ) as NodeListOf<HTMLInputElement>;
    checkboxes.forEach((checkbox) => {
      checkbox.checked = false;
    });
  }

  // Listen to the trigger event, open the modal, add content
  document.addEventListener(editTagsModal.eventName, handleEvent);
  // Edit tags when the save button is clicked
  form.addEventListener("submit", handleSubmit);

  // Close the modal when the cancel button is clicked
  cancelButton.addEventListener("click", () => {
    modal.close();
  });

  modal.addEventListener("close", () => {
    handleClose();
  });
</script>
