---
import Modal from "./Modal.astro";
import Select from "./Select.astro";
import Button from "./Button.astro";

interface Props {
  projects: string[];
}

const { projects } = Astro.props;
---

<Modal id={"move-to-project-modal"}>
  <form class="move-to-project-form__form">
    <div class="move-to-project-form">
      <div class="move-to-project-form__input">
        <label for="project" class="move-to-project-form__input__label"
          >Project</label
        >
        <Select
          autofocus
          name="project"
          class="move-to-project-form__input__input"
          options={[]}
        />
      </div>
      <input type="hidden" name="task-id" />
      <input type="hidden" name="projects" value={projects.join(";")} />
      <div class="move-to-project-form__buttons">
        <Button
          variant="ghost"
          class="move-to-project-form__buttons__button"
          id="cancel"
        >
          Cancel
        </Button>
        <Button
          class="move-to-project-form__buttons__button"
          id="move"
          type="submit"
        >
          Move
        </Button>
      </div>
    </div>
  </form>
</Modal>

<style>
  .move-to-project-form {
    display: grid;
    gap: var(--gap-md);
  }

  .move-to-project-form__input {
    display: grid;
    gap: var(--gap-sm);
  }

  .move-to-project-form__buttons {
    display: flex;
    justify-content: end;
    gap: var(--gap-sm);
  }
</style>

<script>
  import { moveToProjectModal } from "../lib/customEvents";
  import addSelectOptions from "../lib/markup/addSelectOptions";
  import { type Task } from "../lib/models/types";

  const modal = document.getElementById(
    "move-to-project-modal",
  ) as HTMLDialogElement;
  const modalTitle = modal.querySelector(".modal__title") as HTMLHeadingElement;
  const form = modal.querySelector(
    ".move-to-project-form__form",
  ) as HTMLFormElement;
  const select = modal.querySelector("select") as HTMLSelectElement;
  const projectsInput = modal.querySelector(
    "input[name=projects]",
  ) as HTMLInputElement;
  const projects = projectsInput.value.split(";");
  const taskIdInput = modal.querySelector(
    "input[name=task-id]",
  ) as HTMLInputElement;
  const cancelButton = modal.querySelector("#cancel") as HTMLButtonElement;

  // Listen to the trigger event, open the modal, add content
  document.addEventListener(moveToProjectModal.eventName, (event) => {
    const customEvent = event as CustomEvent;
    const task = customEvent.detail.task as Task;

    modalTitle.textContent = task.description;
    taskIdInput.value = task.uuid;

    const projectOptions = [
      { value: "", text: "No project" },
      ...projects.map((project) => ({
        value: project,
        text: project,
        selected: task.project === project,
      })),
    ];
    addSelectOptions(select, projectOptions);

    modal.showModal();
  });

  // Edit project when the submit button is clicked
  form.addEventListener("submit", async (event) => {
    event.preventDefault();
    const formData = new FormData(form);
    const taskId = formData.get("task-id");
    const project = formData.get("project");
    const response = await fetch(`/api/tasks/${taskId}`, {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ key: "project", newValue: project }),
    });
    if (!response.ok) {
      console.error("Failed to move task to project");
    }
    if (response.ok) {
      modal.close();
      location.reload();
    }
  });

  // Close the modal when the cancel button is clicked
  cancelButton.addEventListener("click", () => {
    modal.close();
  });
</script>
